# test.py

import numpy as np
from collections import deque

import Config
from agent_before_phase_2 import prepare_puzzle_world

# -----------------------------------------------------------------------------
# 1) Paste your 30×30 TILE-ID map here (exactly as you listed it)
# -----------------------------------------------------------------------------
tile_ids_str = """
 217  217  217  218    1   13   17   13  641  641  641  642    1    1    1    1    9   17    8  216  217  217  218    1    1  648  649  650  664  649
 225  225  646  226   16  641    8    1    1    1    1    8    1  217  217  218    9   16    1  224  225  646  226    9   13   17   17   17  656  657
   9  648  649  666  648  649  650    1   13    8    1    1    1  225  646  226    8    9   13   13  664  649  650   13    3    1    1    8  664  649
 641   17   17  658  656  657  658    1    8  642  664  649  666  664  649  666   13   13    8    8  672  673  655   13    1    1   17    8  672  673
 649  650    1    1    1    1    1    1   16    8  672  657  658  656  673  658    9   17    9   16  675  676  677    8   16    8    8    9  675  676
 673  655    1  648  649  666  242    8   13   13  664  649  666  675  676  677    1   17   17    8    9  642    9   16   13   13    8    9   16    9
 676  677    1  656  657  658   13    8   17    9  656  673  658    8   13    9   13   13    1    1    8    9   13    8   17   16  641    8  208  209
   1    1    1  664  649  666   13    1    9    9  675  676  677   13    8   17   17    9    8    1    8    1    8   17   13  648  649  650  216  217
   1    9    8  672  657  658   13    1   17   17   13    9    8    9   13    8   16  208  209  209  210    8    9    9   13   17   17   17  224  646
   1   13    9  664  649  666   17    8   17   16    1   16    9    8    8  208  209  254  217  217  255  209  209  210    8    8   16    8  664  649
   1   16    8  672  657  658   13  641  641  641   17  208  209  210    9  216  217  217  263  225  225  225  225  226    9   13    8    8  672  657
   1   13    9  664  649  666    8  224  217  226   16  216  217  218   17  216  217  217  218    8    8    9  641    9   16    8   13    8  664  649
   1   16   13  656  673  658    9   16  225    9    8  224  646  226   16  216  217  217  226    9    1  648  649  650   17    1   13   17  656  657
   1    1   16  675  676  677   13    8    9    8  642  664  649  666   17  224  646  225    9   17   17  656  657  658   17  641    9    8  664  649
   1    1    8   13    8    1   17   17   17   17    9  656  673  658   13  648  649  650    8   13    8  664  649  666  648  649  650   17  656  657
 221    1    1   17    9    9    2  253  253  253   16  675  676  677    1   17   17   17   17  641    8  656  657  658  656  657  658   17  664  649
  17  666    1    9   16    9   13  641  641  246    9   13    1    8   16   13    1    9  648  649  650  664  649  666  664  649  666    8  672  657
  13    1    1    1    1    1   17  224  217  218    9  641  641  641  642    1    1    9  656  673  658  656  657  658  672  657  658    8  664  649
  16    1    9  680  212  213    1   16  225  226    9  224  217  226    8    8   13    9  675  676  677  664  649  666  664  649  666    8  656  673
   1    1   17  219  261  221   16    8    9    1    9   16  225    9    9   13    3   16    8    9    8  656  673  658  672  657  658   16  675  676
   1   17   13   17   17   17    9    9   16    9   13   17  641  642    9    9    8    3    8    9   16  675  676  677  664  649  666  641  642    1
   1    1    1   16    9  641  641  641  641   16   13  648  649  650    8    8    9    1    9   17    1   16    1    8  672  673  662  649  650  648
  13    1    1    3    9  224    1    1    1    1   13  654  673  655   13   17   16   17   17   17   17   17   17   13  675  676  670  657  658  656
   1   13    1  209  210    1    1   16    1    1    9  675  676  677    8    1    9    2  253  253  253  253  253   16    8   13  664  649  666  664
 209  209    1    1  226    1  247  641  246    1    1  642    9    8   17    1    8   13  641  641  641  641  246    9   16    8  672  657  658  672
 217  217  218    1    2    1  216  217  218   17    1    1    1    1  641  641    8   16  224  217  217  217  218   17    1   13  664  649  666  664
 225  646  226    1    1    1  224  646  226    9  224  225    1    1    1    1   13  641   16  225  225  646  226   16  641   17  656  657  658  656
 664  649  666  664  649  666  664  649  666  641  641  641  641    1    8    1    1  226    9    9  664  649  666  648  649  650  664  649  666  664
 656  657  658  672  657  658  672  657  658  224  217  217  226    8  642   17    1    1   13   16  656  673  658   17   17   17  656  673  658  656
 664  649  666  664  649  666  664  649  666   16  225  225    9  641    1    1    1    1  644   13  675  676  677   13  641   16  675  676  677  675
"""

tile_id_map = np.array(
    [ list(map(int, row.split())) for row in tile_ids_str.strip().splitlines() ],
    dtype=int
)

# -----------------------------------------------------------------------------
# 2) Paste your 30×30 TAG-GRID here
# -----------------------------------------------------------------------------
tag_grid_str = """
0 0 0 0 0 0 0 0 1 0 1 0 2 2 2 6 0 0 0 0 0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 2 2 2 2 0 2 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1
0 1 0 0 0 0 1 2 0 0 2 2 2 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1
0 0 0 1 1 1 1 2 0 0 1 0 1 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 2 2 2 2 2 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 1 2 1 1 0 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
1 1 2 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 2 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0
2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1
2 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1
2 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
2 0 0 0 1 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0
2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 1 0 0 1 0
0 2 2 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 0 1 0 0 0
0 1 2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0
0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0
0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 0 0 0 1
2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0
2 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0
2 2 0 0 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1
0 2 2 1 0 0 2 2 2 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0
0 0 2 0 0 2 2 0 2 2 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 1 0
0 0 2 2 0 2 1 0 1 2 2 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 0 0
0 0 0 2 1 2 0 0 0 0 2 2 2 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 0
0 0 0 2 2 2 0 0 0 0 0 0 2 2 2 2 0 1 0 0 0 1 0 0 1 0 1 1 0 0
0 1 0 1 1 1 1 1 1 0 0 0 1 0 0 2 2 0 0 0 0 0 0 1 1 0 0 0 0 1
0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 2 0 0 0 1 1 0 0 0 0 0 1 0 0
0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 5 2 0 1 0 0 0 1 0 0 0 0 0 1 0
"""

tag_grid = np.array(
    [ list(map(int, row.split())) for row in tag_grid_str.strip().splitlines() ],
    dtype=int
)

rows, cols = tag_grid.shape

# -----------------------------------------------------------------------------
# 3) Reconstruct solution_path from start(5) → end(6)
# -----------------------------------------------------------------------------
def find_solution_path(grid):
    start = tuple(np.argwhere(grid==5)[0])
    end   = tuple(np.argwhere(grid==6)[0])
    q, prev = deque([start]), {start: None}
    dirs = [(-1,0),(1,0),(0,-1),(0,1)]
    while q:
        r,c = q.popleft()
        if (r,c)==end: break
        for dr,dc in dirs:
            nr,nc = r+dr, c+dc
            if 0<=nr<rows and 0<=nc<cols and grid[nr,nc]!=1 and (nr,nc) not in prev:
                prev[(nr,nc)] = (r,c)
                q.append((nr,nc))
    # backtrack
    path, cur = [], end
    while cur is not None:
        path.append(cur)
        cur = prev[cur]
    return path[::-1]

solution_path = find_solution_path(tag_grid)

# -----------------------------------------------------------------------------
# 4) StubWorld: minimal getType, get_tile, runWFC
# -----------------------------------------------------------------------------
class StubCell:
    def __init__(self):
        self.possibilities = []
        self.entropy        = 0

class StubWorld:
    def __init__(self, tile_map, tag_map):
        self.tile_map = tile_map
        self.tag_map  = tag_map
        self._cells = [
            [StubCell() for _ in range(tag_map.shape[1])]
            for __ in range(tag_map.shape[0])
        ]
    def getType(self, x, y):
        return int(self.tile_map[y, x])
    def get_tile(self, x, y):
        return self._cells[y][x]
    def runWFC(self, adjacency_rules, weights, region):
        # no-op for testing
        pass

# -----------------------------------------------------------------------------
# 5) Run your polygon-based Sokoban pass
# -----------------------------------------------------------------------------
world = StubWorld(tile_id_map, tag_grid)
prepare_puzzle_world(world, tag_grid, solution_path)

# -----------------------------------------------------------------------------
# 6) Bake the new boulder/hole IDs back into the tile map
# -----------------------------------------------------------------------------
mapping = Config.SOKOBAN_GRID_TO_TILE_MAP
for r in range(rows):
    for c in range(cols):
        if tag_grid[r,c] == 3:      # boulder
            tile_id_map[r,c] = mapping[3]
        elif tag_grid[r,c] == 4:    # hole
            tile_id_map[r,c] = mapping[2]

# -----------------------------------------------------------------------------
# 7) Dump the results
# -----------------------------------------------------------------------------
print("\n=== TAG GRID AFTER INJECTION (3=boulder,4=hole) ===")
for row in tag_grid:
    print(" ".join(str(v) for v in row))

print("\n=== TILE ID MAP AFTER INJECTION ===")
for row in tile_id_map:
    print(" ".join(f"{v:4d}" for v in row))
